1. npm init -y
-y takes all default values

2. install express
npm install express

3. create main application entry point like server.js / app.js / index.js

4. create a good/decent folder structure
src:
  config:
    db.js
    sequelize.js
  controllers:
  middlewares:
    corsMiddleware.js
  models:
  routes:
  utils:
apps.js
package-lock.json
package.json
readme.md
Dockerfile
Jenkinsfile
project.conf
default.conf
.gitignore
.dockerignore
.env
readme

5.inside apps.js paste 
const express = require('express');
const sequelize = require('./src/config/sequelize')

const app = express();
const PORT = 3000;

app.get('/', (req, res) => {
  res.send('Application is started')
})

app.listen(PORT, () => {
  console.log(`Application listening on port ${PORT}`)
})

6. install nodemon to automatically restart application
npm install --save-dev nodemon //to install nodemon as a development dependency

npm install -g nodemon //to install nodemon globally

change package.json file
"start": "nodemon -L app.js", add this in script

7. install mysql2 to connect mysql db, sequelize to create models, body-parser to accept json
npm install mysql2 sequelize body-parser

8. to validate multiple parameters
const requiredFields = ['tenantrecno', 'domainrecno', 'description'];

// Check if any of the required fields are missing
const missingFields = requiredFields.filter(field => req.body[field] === undefined);

if (missingFields.length > 0) {
  return res.status(400).json({ error: `The following fields are required: ${missingFields.join(', ')}` });
}

9. to validate one parameter
if (tenantrecno === undefined) {
  return res.status(400).json({ error: 'tenantrecno is required' });
}

10. install cors middleware
npm install cors
define cors details in corsMiddleware.js File


11. Create .env file to save credentials
To use a .env file we have to use the dotenv package.
npm install dotenv

require('dotenv').config(); // Load .env file
use this in file where we want to use .env


12. Create Dockerfile
FROM node:18

WORKDIR /app

COPY package.json .

RUN npm install

COPY . ./

EXPOSE 3000

CMD [ "npm", "run", "start" ]

13. create .dockerignore file: not to add non-necessary folder in docker container

14. run commands:
  docker build -t <image_name> .
  docker run -p 3000:3000 -d --name <container_name> <image_name></image_name>

15. create multiple env files for multiple environment
  .env.dev
  .env.uat
  .env.prod

16. instal env-cmd
  npm install env-cmd

17. change in package.json
  add new scripts for each env